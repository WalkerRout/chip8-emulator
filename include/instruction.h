#ifndef INSTRUCTION_H
#define INSTRUCTION_H

typedef enum Instruction {
  INSTRUCTION_CLS_RET = 0x0,
  INSTRUCTION_JP1 = 0x1,
  INSTRUCTION_CALL = 0x2,
  INSTRUCTION_SE1 = 0x3,
  INSTRUCTION_SNE1 = 0x4,
  INSTRUCTION_SE2 = 0x5,
  INSTRUCTION_LD1 = 0x6,
  INSTRUCTION_ADD = 0x7,
  INSTRUCTION_ALU_SET = 0x8,
  INSTRUCTION_SNE2 = 0x9,
  INSTRUCTION_LD2 = 0xA,
  INSTRUCTION_JP2 = 0xB,
  INSTRUCTION_RND = 0xC,
  INSTRUCTION_DRW = 0xD,
  INSTRUCTION_SKP_SKPN = 0xE,
  INSTRUCTION_MISC_SET = 0xF
} Instruction;

typedef enum InstructionALU {
  INSTRUCTION_ALU_LD = 0x0,
  INSTRUCTION_ALU_OR = 0x1,
  INSTRUCTION_ALU_AND = 0x2,
  INSTRUCTION_ALU_XOR = 0x3,
  INSTRUCTION_ALU_ADD = 0x4,
  INSTRUCTION_ALU_SUB = 0x5,
  INSTRUCTION_ALU_SHR = 0x6,
  INSTRUCTION_ALU_SUBN = 0x7,
  INSTRUCTION_ALU_SHL = 0xE
} InstructionALU;

typedef enum InstructionMISC {
  INSTRUCTION_MISC_LD1 = 0x07,
  INSTRUCTION_MISC_LD2 = 0x0A,
  INSTRUCTION_MISC_LD3 = 0x15,
  INSTRUCTION_MISC_LD4 = 0x18,
  INSTRUCTION_MISC_ADD = 0x1E,
  INSTRUCTION_MISC_LD5 = 0x29,
  INSTRUCTION_MISC_LD6 = 0x33,
  INSTRUCTION_MISC_LD7 = 0x55,
  INSTRUCTION_MISC_LD8 = 0x65
} InstructionMISC;

#endif // INSTRUCTION_H